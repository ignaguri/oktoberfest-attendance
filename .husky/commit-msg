# Validate commit message format
commit_msg_file="$1"
commit_msg=$(cat "$commit_msg_file")

# Check if commit message is not empty
if [ -z "$commit_msg" ]; then
  echo "❌ Commit message cannot be empty"
  exit 1
fi

# Check if commit message is not too long (first line)
first_line=$(echo "$commit_msg" | head -n1)
if [ ${#first_line} -gt 72 ]; then
  echo "❌ First line of commit message is too long (max 72 characters)"
  echo "Current length: ${#first_line} characters"
  echo "Message: $first_line"
  exit 1
fi

# Check conventional commit format
pattern="^(feat|fix|docs|style|refactor|perf|test|chore|breaking)(\([a-z-]+\))?: .+"

if ! echo "$first_line" | grep -qE "$pattern"; then
  echo "❌ Invalid commit message format!"
  echo ""
  echo "Please use conventional commit format:"
  echo "  <type>[optional scope]: <description>"
  echo ""
  echo "Examples:"
  echo "  feat: add new leaderboard feature"
  echo "  fix(auth): resolve login issue"
  echo "  docs: update README with new features"
  echo "  style: format code with prettier"
  echo "  refactor: restructure component logic"
  echo "  perf: optimize image loading"
  echo "  test: add unit tests for utils"
  echo "  chore: update dependencies"
  echo "  breaking: remove deprecated API"
  echo ""
  echo "Types: feat, fix, docs, style, refactor, perf, test, chore, breaking"
  echo ""
  exit 1
fi

# Check if commit message has a body for breaking changes
if echo "$commit_msg" | grep -q "^breaking:"; then
  if [ $(echo "$commit_msg" | wc -l) -lt 3 ]; then
    echo "❌ Breaking changes must include a detailed description in the commit body"
    echo "Please add a detailed explanation of what is breaking and how to migrate"
    exit 1
  fi
fi

echo "✅ Commit message validation passed"
